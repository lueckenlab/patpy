[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.metadata]
allow-direct-references = true  # Allow installing packages from git repositories

[project]
name = "patient_representation"
version = "1.0.0"
description = "Representing patients or samples from single-cell data"
readme = "README.md"
requires-python = "~=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Vladimir Shitov"},
]
maintainers = [
    {name = "Vladimir Shitov", email = "vladimir.shitov@helmholtz-munich.de"},
]
urls.Documentation = "https://patient_representation.readthedocs.io/"
urls.Source = "https://github.com/lueckenlab/patient_representation"
urls.Home-page = "https://github.com/lueckenlab/patient_representation"
dependencies = [
    "anndata>=0.8",
    "matplotlib>=3.6",
    "numpy>=1.23",
    "opentsne>=0.6",
    "pandas>=1.5",
    "scipy>=1.10",
    "seaborn>=0.12",
    "ehrapy",
    "plottable",
    # for debug logging (referenced from the issue template)
    "session-info",
]

[project.optional-dependencies]
dev = [
    # CLI for bumping the version number
    "pre-commit",
    "twine>=4.0.2"
]
doc = [
    "sphinx>=4",
    "sphinx-book-theme>=1.0.0",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    # For notebooks
    "ipykernel",
    "ipython",
    "sphinx-copybutton",
]
test = [
    "pytest",
    "pytest-cov",
]

mrvi = [
    "scvi-tools>=1.2.0",
    "torch>=1.13",
]

pilot = [
    "pilotpy @ git+https://github.com/CostaLab/PILOT#egg=pilotpy"
]

scpoli = [
    "scarches>=0.5.1",
]

wassersteintsne = [
    "wassersteintsne>=1.1",
]

diffusionemd = [
    "DiffusionEMD @ git+https://github.com/farhadmd7/DiffusionEMD.git@main",
    "phate>=1.0.11",
]

[tool.coverage.run]
source = ["patient_representation"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]

[tool.black]
line-length = 120
target-version = ["py38"]

[tool.ruff]
src = ["src"]
line-length = 120
target-version = "py38"
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb"
]
